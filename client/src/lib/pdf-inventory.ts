import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { format } from 'date-fns';

type InventorySession = {
  id: string;
  date: string;
  status: string;
  startTime: Date;
  endTime?: Date;
};

type InventoryItemData = {
  id: string;
  sessionId: string;
  menuItemId: string;
  stockIn: number;
  stockOut: number;
  stockLeft: number;
  menuItem: {
    id: string;
    name: string;
    price: string;
    category: string;
  };
};

export async function generateInventoryPDF(
  session: InventorySession,
  items: InventoryItemData[]
) {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  
  // Header
  doc.setFillColor(255, 152, 0); // Orange
  doc.rect(0, 0, pageWidth, 40, 'F');
  
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(24);
  doc.setFont('helvetica', 'bold');
  doc.text('Chai-fi', 14, 20);
  
  doc.setFontSize(16);
  doc.text('Inventory Report', 14, 32);
  
  // Date and Time
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  const reportDate = format(new Date(), 'MMM dd, yyyy');
  const reportTime = format(new Date(), 'hh:mm a');
  doc.text(`Date: ${reportDate}`, pageWidth - 14, 20, { align: 'right' });
  doc.text(`Time: ${reportTime}`, pageWidth - 14, 27, { align: 'right' });
  
  // Session Info
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(11);
  doc.setFont('helvetica', 'bold');
  doc.text('Session Information', 14, 52);
  
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(10);
  doc.text(`Session Date: ${format(new Date(session.date), 'MMM dd, yyyy')}`, 14, 60);
  
  // Highlight start time in green
  doc.setTextColor(0, 128, 0);
  doc.setFont('helvetica', 'bold');
  doc.text(`Start Time: ${format(new Date(session.startTime), 'hh:mm a')}`, 14, 67);
  
  if (session.endTime) {
    // Highlight end time in red
    doc.setTextColor(220, 38, 38);
    doc.text(`End Time: ${format(new Date(session.endTime), 'hh:mm a')}`, 14, 74);
  }
  
  // Reset text color
  doc.setTextColor(0, 0, 0);
  doc.setFont('helvetica', 'normal');
  
  // Prepare table data
  const tableData = items.map(item => {
    const revenue = item.stockOut * parseFloat(item.menuItem.price);
    return [
      item.menuItem.name,
      item.menuItem.category,
      item.stockIn.toString(),
      item.stockOut.toString(),
      item.stockLeft.toString(),
      `₹${revenue.toFixed(2)}`
    ];
  });
  
  // Add table
  autoTable(doc, {
    startY: session.endTime ? 82 : 75,
    head: [['Item Name', 'Category', 'Stock In', 'Stock Out', 'Stock Left', 'Revenue']],
    body: tableData,
    theme: 'grid',
    margin: { left: 14, right: 14 },
    tableWidth: pageWidth - 28,
    headStyles: {
      fillColor: [255, 152, 0],
      textColor: [255, 255, 255],
      fontStyle: 'bold',
      halign: 'center'
    },
    columnStyles: {
      0: { cellWidth: 50, halign: 'left' },
      1: { cellWidth: 30, halign: 'center' },
      2: { cellWidth: 22, halign: 'center' },
      3: { cellWidth: 22, halign: 'center' },
      4: { cellWidth: 22, halign: 'center' },
      5: { cellWidth: 26, halign: 'right' }
    },
    styles: {
      fontSize: 9,
      cellPadding: 3,
      overflow: 'linebreak',
      cellWidth: 'wrap'
    },
    alternateRowStyles: {
      fillColor: [255, 248, 240]
    }
  });
  
  // Summary section
  const finalY = (doc as any).lastAutoTable.finalY + 10;
  
  doc.setFillColor(240, 248, 255);
  doc.rect(14, finalY, pageWidth - 28, 35, 'F');
  
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('Summary', 20, finalY + 8);
  
  const totalStockIn = items.reduce((sum, item) => sum + item.stockIn, 0);
  const totalStockOut = items.reduce((sum, item) => sum + item.stockOut, 0);
  const totalStockLeft = items.reduce((sum, item) => sum + item.stockLeft, 0);
  const totalRevenue = items.reduce((sum, item) => 
    sum + (item.stockOut * parseFloat(item.menuItem.price)), 0
  );
  
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(10);
  doc.text(`Total Stock In: ${totalStockIn}`, 20, finalY + 16);
  doc.text(`Total Stock Out: ${totalStockOut}`, 20, finalY + 23);
  doc.text(`Total Stock Left: ${totalStockLeft}`, 20, finalY + 30);
  
  doc.setFont('helvetica', 'bold');
  doc.text(`Total Revenue: ₹${totalRevenue.toFixed(2)}`, pageWidth - 20, finalY + 23, { align: 'right' });
  
  // Footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(128, 128, 128);
    doc.text(
      `Page ${i} of ${pageCount}`,
      pageWidth / 2,
      doc.internal.pageSize.getHeight() - 10,
      { align: 'center' }
    );
    doc.text(
      'Generated by Chai-fi Inventory System',
      pageWidth / 2,
      doc.internal.pageSize.getHeight() - 5,
      { align: 'center' }
    );
  }
  
  // Save the PDF
  const fileName = `Inventory_Report_${format(new Date(session.date), 'yyyy-MM-dd')}.pdf`;
  doc.save(fileName);
}